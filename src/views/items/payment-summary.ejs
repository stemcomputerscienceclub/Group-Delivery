<%
// Helper function to safely escape JSON for JavaScript
function safeStringify(obj) {
    return JSON.stringify(obj)
        .replace(/'/g, "\\'")
        .replace(/\\"/g, '\\"')
        .replace(/\\&/g, "\\\\&")
        .replace(/\\r/g, "\\\\r")
        .replace(/\\n/g, "\\\\n")
        .replace(/\\t/g, "\\\\t")
        .replace(/\\b/g, "\\\\b")
        .replace(/\\f/g, "\\\\f");
}
%>
<div class="container mt-4 mb-5">
    <div class="row">
        <div class="col-md-8 mx-auto">
            <div class="card shadow">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">
                        Order Summary
                        <span class="badge bg-<%= item.status === 'open' ? 'success' : (item.status === 'delivered' ? 'bg-info' : 'bg-secondary') %> ms-2">
                            <%= item.status.charAt(0).toUpperCase() + item.status.slice(1) %>
                        </span>
                    </h4>
                </div>
                <div class="card-body">
                    <!-- Restaurant Info -->
                    <h5><%= item.restaurant ? item.restaurant.name : 'Restaurant Unavailable' %></h5>
                    <div class="mb-4">
                        <div class="text-body-secondary">
                            <i class="bi bi-clock"></i> 
                            <% if (item.status === 'delivered') { %>
                                Delivered: <%= new Date(item.deliveredAt).toLocaleString() %>
                            <% } else { %>
                                Delivery: <%= new Date(item.deliveryTime).toLocaleString() %>
                            <% } %>
                        </div>
                        <div class="text-body-secondary">
                            <i class="bi bi-truck"></i> 
                            Delivery Fee: $<%= item.deliveryFee.toFixed(2) %>
                        </div>
                        <% if (item.message) { %>
                            <div class="text-body-secondary">
                                <i class="bi bi-chat-text"></i> <%= item.message %>
                            </div>
                        <% } %>
                    </div>

                    <!-- Group Order Info -->
                    <div class="card bg-body-tertiary border mb-4">
                        <div class="card-body">
                            <h6 class="card-title">Group Order Created By:</h6>
                            <div class="text-body-secondary">
                                <i class="bi bi-person"></i> <%= item.createdBy ? item.createdBy.name : 'Unknown' %>
                            </div>
                            <div class="text-body-secondary">
                                <i class="bi bi-telephone"></i> <%= item.createdBy ? item.createdBy.phoneNumber : 'N/A' %>
                            </div>
                            <div class="text-body-secondary">
                                <i class="bi bi-house-door"></i> Room <%= item.creatorRoom %>
                            </div>
                            <% if (item.creatorChange !== 0) { %>
                                <div class="alert alert-info mt-2 mb-0">
                                    <i class="bi bi-cash"></i>
                                    <% if (item.creatorChange > 0) { %>
                                        You have $<%= item.creatorChange.toFixed(2) %> in change to give back
                                    <% } else { %>
                                        You are short $<%= Math.abs(item.creatorChange).toFixed(2) %>
                                    <% } %>
                                </div>
                            <% } %>
                        </div>
                    </div>

                    <!-- Consolidated Order Summary -->
                    <div class="card bg-body-tertiary border mb-4">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">Consolidated Items</h6>
                            <div class="btn-group btn-group-sm" role="group">
                                <button type="button" class="btn btn-outline-primary active js-filter-btn" data-filter="all">
                                    All Orders
                                </button>
                                <button type="button" class="btn btn-outline-primary js-filter-btn" data-filter="paid">
                                    Paid Only
                                </button>
                            </div>
                        </div>
                        <div class="card-body p-0">
                            <div class="list-group list-group-flush" id="consolidatedItems">
                                <!-- Items will be populated by JavaScript -->
                            </div>
                        </div>
                    </div>

                    <!-- Individual Orders Table -->
                    <div class="table-responsive">
                        <table class="table align-middle">
                            <thead>
                                <tr>
                                    <th>User Info</th>
                                    <th>Items</th>
                                    <th class="text-end">Subtotal</th>
                                    <th class="text-end">Delivery Fee</th>
                                    <th class="text-end">Total Due</th>
                                    <th class="text-end">Amount Paid</th>
                                    <th class="text-center">Status</th>
                                    <th class="text-center">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% 
                                    let groupSubtotal = 0;
                                    item.individualOrders.forEach(order => {
                                        const orderSubtotal = order.items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
                                        groupSubtotal += orderSubtotal;
                                %>
                                    <tr class="order-row" data-paid="<%= order.paid %>">
                                        <td>
                                            <div><%= order.user ? order.user.name : 'Unknown' %></div>
                                            <small class="text-body-secondary">Room <%= order.user ? order.user.roomNumber : 'N/A' %></small>
                                        </td>
                                        <td>
                                            <% order.items.forEach(item => { %>
                                                <div>
                                                    <%= item.quantity %>x <%= item.name %>
                                                    <% if (item.note) { %>
                                                        <small class="text-body-secondary">(<%= item.note %>)</small>
                                                    <% } %>
                                                </div>
                                            <% }); %>
                                            <% if (order.specialInstructions) { %>
                                                <small class="text-body-secondary d-block">
                                                    <i class="bi bi-info-circle"></i> <%= order.specialInstructions %>
                                                </small>
                                            <% } %>
                                        </td>
                                        <td class="text-end">$<%= orderSubtotal.toFixed(2) %></td>
                                        <td class="text-end">$<%= (item.deliveryFee / item.individualOrders.length).toFixed(2) %></td>
                                        <td class="text-end">$<%= (orderSubtotal + (item.deliveryFee / item.individualOrders.length)).toFixed(2) %></td>
                                        <td class="text-end">
                                            $<%= order.amountPaid.toFixed(2) %>
                                            <% if (order.change > 0) { %>
                                                <div class="small text-success">
                                                    Change: $<%= order.change.toFixed(2) %>
                                                </div>
                                            <% } %>
                                        </td>
                                        <td class="text-center">
                                            <% if (order.paid) { %>
                                                <i class="bi bi-check-circle-fill text-success"></i>
                                            <% } else { %>
                                                <i class="bi bi-x-circle-fill text-danger"></i>
                                            <% } %>
                                        </td>
                                        <td class="text-center">
                                            <% if (isCreator) { %>
                                                <button type="button" 
                                                        class="btn btn-sm <%= order.paid ? 'btn-outline-danger' : 'btn-outline-success' %> js-toggle-payment"
                                                        data-order-id="<%= order._id.toString() %>"
                                                        data-amount="<%= order.totalAmount %>">
                                                    <%= order.paid ? 'Mark Unpaid' : 'Mark Paid' %>
                                                </button>
                                                <button type="button"
                                                        class="btn btn-sm btn-outline-primary mt-1 js-show-payment-modal"
                                                        data-order-id="<%= order._id.toString() %>"
                                                        data-amount="<%= orderSubtotal + (item.deliveryFee / item.individualOrders.length) %>">
                                                    <i class="bi bi-cash"></i> Enter Amount
                                                </button>
                                            <% } %>
                                        </td>
                                    </tr>
                                <% }); %>
                                <!-- Group Total -->
                                <tr class="table-group-divider">
                                    <td colspan="2"><strong>Group Total</strong></td>
                                    <td class="text-end"><strong>$<%= groupSubtotal.toFixed(2) %></strong></td>
                                    <td class="text-end"><strong>$<%= item.deliveryFee.toFixed(2) %></strong></td>
                                    <td class="text-end"><strong>$<%= (groupSubtotal + item.deliveryFee).toFixed(2) %></strong></td>
                                    <td class="text-end">
                                        <strong>$<%= item.totalAmountPaid.toFixed(2) %></strong>
                                        <% if (item.totalChange > 0) { %>
                                            <div class="small text-success">
                                                Total Change: $<%= item.totalChange.toFixed(2) %>
                                            </div>
                                        <% } %>
                                    </td>
                                    <td colspan="2" class="text-center">
                                        <% if (item.allPaid) { %>
                                            <span class="badge bg-success">All Paid</span>
                                        <% } else { %>
                                            <span class="badge bg-warning text-dark">Pending</span>
                                        <% } %>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- Actions -->
                    <div class="mt-4">
                        <a href="/items/<%= item._id %>" class="btn btn-outline-secondary">
                            <i class="bi bi-arrow-left"></i> Back to Order
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Payment Modal -->
<div class="modal fade" id="paymentModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Enter Payment Amount</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="paymentForm">
                    <input type="hidden" id="orderId">
                    <input type="hidden" id="totalDue">
                    <div class="mb-3">
                        <label for="amountPaid" class="form-label">Amount Paid</label>
                        <div class="input-group">
                            <span class="input-group-text">$</span>
                            <input type="number" 
                                   class="form-control" 
                                   id="amountPaid" 
                                   step="0.01" 
                                   min="0" 
                                   required>
                        </div>
                    </div>
                    <div id="changePreview" class="alert alert-info d-none">
                        Change to give: $<span id="changeAmount">0.00</span>
                    </div>
                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary">Update Payment</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    // Store orders data safely escaped
    const orders = JSON.parse('<%- safeStringify(item.individualOrders) %>');
    const itemId = '<%- item._id %>';
    let paymentModal;

    // Initialize after Bootstrap is ready
    window.addEventListener('bootstrap-ready', function() {
        try {
            console.log('Initializing payment functionality...');
            
            // Initialize Bootstrap Modal
            paymentModal = window.initModal('paymentModal');
            console.log('Payment modal initialized:', paymentModal);

            // Initialize consolidated items
            filterItems('all');

            // Add event listeners for payment buttons
            document.querySelectorAll('.js-toggle-payment').forEach(btn => {
                btn.addEventListener('click', function() {
                    const orderId = this.dataset.orderId;
                    const amount = parseFloat(this.dataset.amount);
                    updatePayment(orderId, amount);
                });
            });

            document.querySelectorAll('.js-show-payment-modal').forEach(btn => {
                btn.addEventListener('click', function() {
                    const orderId = this.dataset.orderId;
                    const amount = parseFloat(this.dataset.amount);
                    showPaymentModal(orderId, amount);
                });
            });

            // Add event listeners for filter buttons
            document.querySelectorAll('.js-filter-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    filterItems(this.dataset.filter);
                });
            });

            // Add event listener for amount input
            const amountPaidInput = document.getElementById('amountPaid');
            if (amountPaidInput) {
                amountPaidInput.addEventListener('input', updateChangePreview);
            }

            // Add event listener for payment form
            const paymentForm = document.getElementById('paymentForm');
            if (paymentForm) {
                paymentForm.addEventListener('submit', function(event) {
                    event.preventDefault();
                    const orderId = document.getElementById('orderId').value;
                    const amountPaid = parseFloat(document.getElementById('amountPaid').value);
                    updatePayment(orderId, amountPaid);
                    paymentModal.hide();
                });
            }

            console.log('Payment functionality initialized successfully');
        } catch (err) {
            console.error('Error initializing payment functionality:', err);
        }
    });

    // Consolidate items across orders
    function consolidateItems(filterPaid) {
        const itemMap = new Map();
        
        orders.forEach(order => {
            if (filterPaid && !order.paid) return;

            order.items.forEach(item => {
                const key = item.name;
                if (!itemMap.has(key)) {
                    itemMap.set(key, {
                        name: item.name,
                        quantity: 0,
                        price: item.price,
                        total: 0,
                        orderedBy: new Set()
                    });
                }
                const consolidatedItem = itemMap.get(key);
                consolidatedItem.quantity += item.quantity;
                consolidatedItem.total += item.price * item.quantity;
                consolidatedItem.orderedBy.add(order.user ? order.user.name : 'Unknown');
            });
        });

        return Array.from(itemMap.values())
            .sort((a, b) => b.quantity - a.quantity);
    }

    // Update consolidated items display
    function updateConsolidatedItems(items) {
        const container = document.getElementById('consolidatedItems');
        if (!container) return;

        container.innerHTML = items.map(item => `
            <div class="list-group-item">
                <div class="d-flex justify-content-between align-items-start">
                    <div>
                        <h6 class="mb-1">${window.escapeHtml(item.name)}</h6>
                        <small class="text-body-secondary">
                            Ordered by: ${Array.from(item.orderedBy).map(name => window.escapeHtml(name)).join(', ')}
                        </small>
                    </div>
                    <div class="text-end">
                        <div class="fw-bold">${item.quantity}x</div>
                        <small class="text-body-secondary">$${item.total.toFixed(2)}</small>
                    </div>
                </div>
            </div>
        `).join('') || `
            <div class="list-group-item text-center text-body-secondary py-3">
                No items found
            </div>
        `;
    }

    // Filter items
    function filterItems(type) {
        // Update button states
        document.querySelectorAll('.js-filter-btn').forEach(btn => {
            btn.classList.remove('active');
            if (btn.dataset.filter === type) {
                btn.classList.add('active');
            }
        });

        // Update items display
        const items = consolidateItems(type === 'paid');
        updateConsolidatedItems(items);
    }

    // Show payment modal
    function showPaymentModal(orderId, totalDue) {
        console.log('Showing payment modal:', { orderId, totalDue, modal: paymentModal });
        const orderIdInput = document.getElementById('orderId');
        const totalDueInput = document.getElementById('totalDue');
        const amountPaidInput = document.getElementById('amountPaid');
        
        if (orderIdInput) orderIdInput.value = orderId;
        if (totalDueInput) totalDueInput.value = totalDue;
        if (amountPaidInput) amountPaidInput.value = totalDue;
        
        updateChangePreview();
        if (paymentModal) {
            try {
                paymentModal.show();
            } catch (err) {
                console.error('Error showing modal:', err);
                alert('Error showing payment modal. Please try again.');
            }
        } else {
            console.error('Payment modal not initialized');
            alert('Payment modal not ready. Please refresh the page and try again.');
        }
    }

    // Update change preview
    function updateChangePreview() {
        const amountPaidInput = document.getElementById('amountPaid');
        const totalDueInput = document.getElementById('totalDue');
        const changePreview = document.getElementById('changePreview');
        const changeAmount = document.getElementById('changeAmount');

        if (!amountPaidInput || !totalDueInput || !changePreview || !changeAmount) return;

        const amountPaid = parseFloat(amountPaidInput.value) || 0;
        const totalDue = parseFloat(totalDueInput.value) || 0;
        const change = Math.max(0, amountPaid - totalDue);

        if (change > 0) {
            changeAmount.textContent = change.toFixed(2);
            changePreview.classList.remove('d-none');
        } else {
            changePreview.classList.add('d-none');
        }
    }

    // Update payment
    function updatePayment(orderId, amount) {
        fetch(`/items/${itemId}/update-payment/${orderId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({ amountPaid: amount })
        }).then(response => {
            if (!response.ok) {
                return response.json().then(err => Promise.reject(err));
            }
            return response.json();
        }).then(data => {
            if (data.success) {
                window.location.reload();
            } else {
                throw new Error(data.error || 'Unknown error occurred');
            }
        }).catch(err => {
            console.error('Error updating payment:', err);
            alert('Error updating payment: ' + (err.message || 'Please try again'));
        });
    }
</script>